// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/kumin/BityDating/entities"
	mock "github.com/stretchr/testify/mock"
)

// FeedRepo is an autogenerated mock type for the FeedRepo type
type FeedRepo struct {
	mock.Mock
}

// GetFeed provides a mock function with given fields: ctx, userId, page, limit
func (_m *FeedRepo) GetFeed(ctx context.Context, userId int64, page int, limit int) ([]*entities.User, error) {
	ret := _m.Called(ctx, userId, page, limit)

	var r0 []*entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int) ([]*entities.User, error)); ok {
		return rf(ctx, userId, page, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int) []*entities.User); ok {
		r0 = rf(ctx, userId, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int, int) error); ok {
		r1 = rf(ctx, userId, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFeedRepo creates a new instance of FeedRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFeedRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *FeedRepo {
	mock := &FeedRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
