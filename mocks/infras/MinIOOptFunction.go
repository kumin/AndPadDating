// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	infras "github.com/kumin/BityDating/infras"
	mock "github.com/stretchr/testify/mock"
)

// MinIOOptFunction is an autogenerated mock type for the MinIOOptFunction type
type MinIOOptFunction struct {
	mock.Mock
}

// Execute provides a mock function with given fields: opt
func (_m *MinIOOptFunction) Execute(opt *infras.MinIOOption) *infras.MinIOOption {
	ret := _m.Called(opt)

	var r0 *infras.MinIOOption
	if rf, ok := ret.Get(0).(func(*infras.MinIOOption) *infras.MinIOOption); ok {
		r0 = rf(opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infras.MinIOOption)
		}
	}

	return r0
}

// NewMinIOOptFunction creates a new instance of MinIOOptFunction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMinIOOptFunction(t interface {
	mock.TestingT
	Cleanup(func())
}) *MinIOOptFunction {
	mock := &MinIOOptFunction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
