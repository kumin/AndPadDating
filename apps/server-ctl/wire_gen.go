// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package apps

import (
	"github.com/google/wire"
	"github.com/kumin/BityDating/configs"
	"github.com/kumin/BityDating/handler/http/v1"
	"github.com/kumin/BityDating/infras"
	"github.com/kumin/BityDating/repos/minio"
	"github.com/kumin/BityDating/repos/mysql"
	"github.com/kumin/BityDating/services"
)

// Injectors from wire.go:

func BuildServer() (*HttpServer, error) {
	serverConfiguration := configs.NewServerConfiguration()
	mysqlConnector := infras.NewMysqlConnector()
	userMysqlRepo := mysql.NewUserMysqlRepo(mysqlConnector)
	client, err := infras.NewMinioClient()
	if err != nil {
		return nil, err
	}
	fileMinioRepo := minio.NewFileMinioRepo(client)
	userService := services.NewUserService(userMysqlRepo, fileMinioRepo)
	userHandler := http_handler.NewUserHandler(userService)
	matchingMysqlRepo := mysql.NewMatchingMysqlRepo(mysqlConnector)
	matchingService := services.NewMatchingService(matchingMysqlRepo)
	matchingHandler := http_handler.NewMatchingHandler(matchingService)
	feedMysqlRepo := mysql.NewFeedMysqlRepo(mysqlConnector)
	feedService := services.NewFeedService(feedMysqlRepo)
	feedHandler := http_handler.NewFeedHandler(feedService)
	authService := services.NewAuthService(userMysqlRepo)
	authHandler := http_handler.NewAuthHandler(authService)
	albumMysqlRepo := mysql.NewAlbumMysqlRepo(mysqlConnector, fileMinioRepo)
	albumService := services.NewAlbumService(albumMysqlRepo)
	albumHandler := http_handler.NewAlbumHandler(albumService)
	httpServer := NewHttpServer(serverConfiguration, userHandler, matchingHandler, feedHandler, authHandler, albumHandler)
	return httpServer, nil
}

// wire.go:

var SuperGraphSet = wire.NewSet(
	ServerGraphSet,
)
